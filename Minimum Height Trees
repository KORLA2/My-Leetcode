  
  class Solution {
    public:
   int neighbour(vector<vector<int>>& edges,int x){

for(auto t:edges){
if(t[0]==x)return t[1];
else if(t[1]==x)return t[0];
}
return 0;
   }


    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {

    vector<int>degree(n,0);
 if(n==1)return  {0};

 for(auto x: edges){

degree[x[0]]++;
degree[x[1]]++;

    }
    queue<int>q;
for(int i=0;i<n;++i)
if(degree[i]==1)q.push(i);

while(n>2){

int size=q.size();

while(size--){
int x= q.front();
int nei=neighbour(edges,x);
 int p=--degree[nei];
if(p==1)q.push(nei);
q.pop();
n--;
}


}
vector<int> ans;
while(q.size()){

ans.push_back(q.front());q.pop();}

return  ans;
    }


};
