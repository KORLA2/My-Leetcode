Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
Each vowel 'a' may only be followed by an 'e'.
Each vowel 'e' may only be followed by an 'a' or an 'i'.
Each vowel 'i' may not be followed by another 'i'.
Each vowel 'o' may only be followed by an 'i' or a 'u'.
Each vowel 'u' may only be followed by an 'a'.
//Memoizing
Choose any character and there after choose corresponding character store already calculated value for the future purpose
TC:O(5^N); in the worst case
class Solution {
const int N=1e9+7;
    
    public:
   int create(int n,char chose,map<char,vector<char>>mp,vector<vector<int>>&dp){
       if(n==1){dp[chose][n]=1;
               return dp[chose][n];}
       
       if(dp[chose][n])return dp[chose][n];
       
       for(char ch:mp[chose])
           
           dp[chose][n]=(dp[chose][n]+create(n-1,ch,mp,dp))%N;
       
       return dp[chose][n];
   }
    
    int countVowelPermutation(int n) {
       map<char,vector<char>>maps;
        int ans=0;
            maps[0]={1};
        maps[1]={0,2};
        maps[2]={0,1,3,4};
      maps[3]={2,4};
        maps[4]={0};
vector<vector<int>>dp(5,vector<int>(n+1,0));
   for(int i=0;i<5;++i)
        ans=(ans+create(n,i,maps,dp))%N;
    return ans;
        
    }
};

//Dp approach 
Instead of choosing particular character storing all 1 len res which may be used for 2 len and there by for 3 len so on.
TC:O(N);
class Solution {
const int N=1e9+7;
    
        public:         
 int countVowelPermutation(int n) {
    
        map<int,vector<int>>mp;
        
        mp[0]={1,2,4};
        mp[1]={0,2};
        mp[2]={1,3};
        mp[3]={2};
        mp[4]={2,3};
        
       vector<vector<int>>dp(5,vector<int>(n+1,0));
        for(int j=0;j<5;++j)
            dp[j][1]=1;
        
        int ans=0;
        for(int i=1;i<=n;++i){
            
  for(int j=0;j<5;++j)
            {  for(int k:mp[j])
                dp[j][i]=(dp[j][i]+dp[k][i-1])%N;
            if(i==n)ans=(ans+dp[j][i])%N;
            }
        }
        return ans;
    }
};
