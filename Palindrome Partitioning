class Solution {

    vector<vector<string>>pali;
    bool palindrome(string str,int low,int high){
        
        while(low<high&&(str[low]==str[high])){low++;high--;}
      
        return low==high||low>high;
        
            return 0;
    }
 void  partition(string s,int low,int high,vector<string>vecs){
        if(low>high){pali.push_back(vecs);return ;}
    
       for(int i=low;i<=high;++i){
          
          if(palindrome(s,low,i)){
              vecs.push_back(s.substr(low,i-low+1));
              partition(s,i+1,high,vecs);
              vecs.pop_back();
          }
       } 

        
    }
    
    public:

    vector<vector<string>> partition(string s) {
    
vector<string>vecs;
    partition(s,0,s.size()-1,vecs);
      // cout<<palindrome(s,0,2);
        return pali;
       
    }
};
