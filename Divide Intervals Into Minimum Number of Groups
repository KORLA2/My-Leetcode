
TLE Approach
TC:O(N*N);
N=interval size

class Solution {
public:
    
    bool merge(vector<int>left,vector<int>right){
        
        if(left[0]<=right[1]&&right[0]<=left[1])return 0;
        return 1;
        
    }
    pair<int,int>unvisited(vector<bool>vecs){
        
        int first=INT_MAX,second=INT_MAX;
        
        for(int i=0;i<vecs.size();++i)
        if(vecs[i]==1){
            if(first==INT_MAX)first=i;
            else if(second==INT_MAX)second=i;
            else return {first,second};
            
        }
        return {first,second};
    }
    int minGroups(vector<vector<int>>& intervals) {
        
        vector<bool>vis(intervals.size(),1);
    
        sort(intervals.begin(),intervals.end());
        int ans=0;
        while(1){
    
           pair<int,int> pai=unvisited(vis);

            int i=pai.first,j=pai.second;
    if(i==j)break;
       while(j<intervals.size()){
               if(vis[j]&&merge(intervals[i],intervals[j])){vis[i]=vis[j]=0;i=j;j++;}
                else{ j++;}
            }
            vis[i]=0;
            ans++;
}
        
        
        return ans;
        
    }
};

Optimal approach ;
O(N*log(N)) For sorting + (Heap insertion + deletion) N times

class Solution {
public:
    
   
    int minGroups(vector<vector<int>>& intervals) {
        
      sort(intervals.begin(),intervals.end());
        
        
        priority_queue<int>pq;
        
        for(int i=0;i<intervals.size();++i)
        {
            if(pq.size()&&-pq.top()<intervals[i][0])
            pq.pop();
        
            pq.push(-intervals[i][1]);

        }
            
            
        return pq.size();
    }
};




