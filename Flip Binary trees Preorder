/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>array;
    int idx=0;
int flip(TreeNode* root, vector<int>& voyage){
        
        if(!root) return 1;
      if(root->val!=voyage[idx]){
          array.clear();
          array.push_back(-1);
          return 0;      
                                }
           idx++;
      
            if(root->left&&root->left->val!=voyage[idx])
            {  array.push_back(root->val);
      
              return   flip(root->right,voyage)&&flip(root->left,voyage);
            
          
            }
        else return flip(root->left,voyage)&&flip(root->right,voyage);
    }
    
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {

  flip(root,voyage);
        
        return array;
        }
};
